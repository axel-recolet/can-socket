#!/usr/bin/env node

/**
 * Test adaptatif selon la plateforme
 */

console.log("üß™ Test SocketCAN adaptatif");
console.log(`üñ•Ô∏è  Plateforme: ${process.platform}`);

if (process.platform !== "linux") {
  console.log("‚ö†Ô∏è  SocketCAN n√©cessite Linux - Tests adapt√©s pour macOS");

  try {
    console.log("\n1. Test de structure des fichiers...");
    const fs = require("fs");
    const path = require("path");

    // V√©rification des fichiers essentiels
    const essentialFiles = [
      "can_socket.node",
      "dist/src/main.js",
      "dist/src/main.d.ts",
      "dist/src/socketcan.js",
      "package.json",
    ];

    let filesOk = 0;
    for (const file of essentialFiles) {
      const fullPath = path.join(__dirname, "..", file);
      if (fs.existsSync(fullPath)) {
        filesOk++;
        console.log(`   ‚úÖ ${file}`);
      } else {
        console.log(`   ‚ùå ${file} manquant`);
      }
    }

    console.log(
      `\n2. R√©sultats: ${filesOk}/${essentialFiles.length} fichiers pr√©sents`
    );

    if (filesOk === essentialFiles.length) {
      console.log("\nüéâ Structure du projet correcte !");
      console.log("üí° Module pr√™t pour les tests sur Linux");
      console.log("\nüìã Pour tester compl√®tement:");
      console.log("   ‚Ä¢ D√©ployez sur un syst√®me Linux");
      console.log("   ‚Ä¢ Ex√©cutez: npm test");
      console.log("   ‚Ä¢ Ou: npm run test:core");
    } else {
      console.log("\n‚ö†Ô∏è  Structure incompl√®te - v√©rifiez la compilation");
    }
  } catch (error) {
    console.error("‚ùå Erreur:", error.message);
    process.exit(1);
  }
} else {
  console.log("üêß Syst√®me Linux d√©tect√© - Tests complets disponibles");

  try {
    // Sur Linux, on peut tester le chargement
    console.log("\n1. Test de chargement du module...");
    const SocketCAN = require("../dist/src/main");
    console.log("   ‚úÖ Module charg√© avec succ√®s");

    // Tests basiques sans interface CAN
    console.log("\n2. Tests de validation...");

    // Test de cr√©ation (peut √©chouer sans interface)
    try {
      const socket = new SocketCAN.SocketCAN();
      console.log("   ‚úÖ Socket cr√©√©");
      socket.close();
      console.log("   ‚úÖ Socket ferm√©");
    } catch (error) {
      if (
        error.message.includes("interface") ||
        error.message.includes("device")
      ) {
        console.log("   ‚ö†Ô∏è  Interface CAN non disponible (normal)");
      } else {
        throw error;
      }
    }

    console.log("\nüéâ Tests Linux basiques r√©ussis !");
  } catch (error) {
    console.error("‚ùå Erreur sur Linux:", error.message);
    process.exit(1);
  }
}
